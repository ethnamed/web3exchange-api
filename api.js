// Generated by LiveScript 1.6.0
(function(){
  var post, guid, jsonParse, bitcore, Message, createSignature, convertBuilder, getAddress, createApi, out$ = typeof exports != 'undefined' && exports || this;
  post = require('superagent').post;
  guid = require('./guid.js');
  jsonParse = require('./json-parse.js');
  bitcore = require('bitcore-lib');
  Message = require('bitcore-message');
  createSignature = function(request, cb){
    return jsonParse(request, function(err, str){
      var signature;
      if (err != null) {
        return cb(err);
      }
      signature = Message(str).sign(privateKey);
      if (err != null) {
        return cb(err);
      }
      return cb(null, signature);
    });
  };
  convertBuilder = function(config){
    return function(arg$, cb){
      var from, to, value, address, apiUrl, clientid, request;
      from = arg$.from, to = arg$.to, value = arg$.value, address = arg$.address;
      apiUrl = config.apiUrl;
      clientid = guid();
      request = {
        to: to,
        from: from,
        value: value,
        address: address,
        clientid: clientid
      };
      return createSignature(request, function(err, signature){
        if (err != null) {
          return cb(err);
        }
        return post(apiUrl + "/exchange", request).set('signature', signature).end(function(err, data){
          if (err != null) {
            return cb(err);
          }
          return jsonParse(data.text, function(err, result){
            if (err != null) {
              return cb(err);
            }
            return cb(null, result);
          });
        });
      });
    };
  };
  out$.getAddress = getAddress = function(key){
    var privateKey;
    privateKey = bitcore.PrivateKey.fromWIF(key);
    return privateKey.toAddress(bitcore.Networks.livenet).toString();
  };
  out$.createApi = createApi = function(apiUrl){
    var config, convert;
    config = {
      apiUrl: apiUrl
    };
    convert = convertBuilder(config);
    return {
      convert: convert
    };
  };
}).call(this);
