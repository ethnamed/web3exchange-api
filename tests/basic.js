// Generated by LiveScript 1.6.0
(function(){
  var web3t, ref$, createApi, createClientid, generateMnemonic, jsonParse, cryptoToFiat, fiatToCrypto, runTests, run;
  web3t = require('../../web3t.ls');
  ref$ = require('../api.ls'), createApi = ref$.createApi, createClientid = ref$.createClientid;
  generateMnemonic = require('bip39').generateMnemonic;
  jsonParse = require('../json-parse.ls');
  cryptoToFiat = function(config, arg$, cb){
    var from, to, value, address;
    from = arg$.from, to = arg$.to, value = arg$.value, address = arg$.address;
    return createApi({
      apiUrl: config.apiUrl,
      privateKey: config.privateKey
    }, function(err, api){
      var convert, clientid;
      if (err != null) {
        return cb(err);
      }
      convert = api.convert;
      clientid = createClientid();
      return convert({
        to: to,
        from: from,
        value: value,
        address: address,
        clientid: clientid
      }, function(err, result){
        var address, ref$, createAccount, getBalance, sendTransaction;
        if (err != null) {
          return cb(err);
        }
        address = result.address;
        if (address == null) {
          return cb("address is expected");
        }
        ref$ = web3t.eth, createAccount = ref$.createAccount, getBalance = ref$.getBalance, sendTransaction = ref$.sendTransaction;
        return createAccount({
          mnemonic: config.mnemonic,
          index: 0
        }, function(err, account){
          if (err != null) {
            return cb(err);
          }
          return getBalance({
            account: account
          }, function(err, balance){
            if (err != null) {
              return cb(err);
            }
            if (balance === '0') {
              return cb("balance should not be an zero");
            }
            return sendTransaction({
              to: address,
              account: account,
              amount: value
            }, function(err, tx){
              if (err != null) {
                return cb(err);
              }
              if (tx == null) {
                return cb("tx is expected");
              }
              return setTimeout(function(){
                return cb(null);
              }, 2000);
            });
          });
        });
      });
    });
  };
  fiatToCrypto = function(config, arg$, cb){
    var from, to, value;
    from = arg$.from, to = arg$.to, value = arg$.value;
    return createApi({
      apiUrl: config.apiUrl,
      privateKey: config.privateKey
    }, function(err, api){
      var convert, mnemonic, ref$, createAccount, getBalance, sendTransaction;
      if (err != null) {
        return cb(err);
      }
      convert = api.convert;
      mnemonic = generateMnemonic();
      ref$ = web3t.eth, createAccount = ref$.createAccount, getBalance = ref$.getBalance, sendTransaction = ref$.sendTransaction;
      return createAccount({
        mnemonic: config.mnemonic,
        index: 0
      }, function(err, account){
        var clientid;
        if (err != null) {
          return cb(err);
        }
        clientid = createClientid();
        return convert({
          to: to,
          from: from,
          value: value,
          address: account.address,
          clientid: clientid
        }, function(err, result){
          if (err != null) {
            return cb(err);
          }
          return setTimeout(function(){
            return getBalance({
              account: account
            }, function(err, balance){
              if (err != null) {
                return cb(err);
              }
              if (balance === '0') {
                return cb("balance should not be an zero");
              }
              return cb(null);
            });
          }, 10000);
        });
      });
    });
  };
  runTests = function(config, cb){
    return cryptoToFiat(config, {
      from: 'ETH',
      to: 'USD',
      value: "1",
      address: '0000 0000 0000 0000'
    }, function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
      return fiatToCrypto(config, {
        from: 'USD',
        to: 'ETH',
        value: "100"
      }, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  };
  run = function(cb){
    var apiUrl, privateKey, mnemonic;
    apiUrl = 'http://ethnamed.io:8081';
    privateKey = 'cPBn5A4ikZvBTQ8D7NnvHZYCAxzDZ5Z2TSGW2LkyPiLxqYaJPBW4';
    mnemonic = "xmr bch btg ltc eth eos xem ada dash btc zec bcn";
    return runTests({
      apiUrl: apiUrl,
      privateKey: privateKey,
      mnemonic: mnemonic
    }, function(err){
      return cb(err);
    });
  };
  run(function(err){
    return console.log(err);
  });
}).call(this);
